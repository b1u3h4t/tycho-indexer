syntax = "proto3";

import "common.proto";
import "erc20.proto";

package messari.dex_amm.v1;

message Token {
  // Smart contract address of the token.
  string address = 1;

  // Name of the token, mirrored from the smart contract.
  string name = 2;

  // Symbol of the token, mirrored from the smart contract.
  string symbol = 3;

  // The number of decimal places this token uses, default to 18.
  uint64 decimals = 4;

  // Optional field to track the price of a token, mostly for caching purposes.
  optional string lastPriceUSD = 5;

  // Optional field to track the block number of the last token price.
  optional uint64 lastPriceBlockNumber = 6;
}

message RewardToken {
  // " { Reward token type }-{ Smart contract address of the reward token } "
  string id = 1;

  // Reference to the actual token.
  Token token = 2;

  enum RewardTokenType {
    // For reward tokens awarded to LPs/lenders.
    DEPOSIT = 0;

    // For reward tokens awarded to borrowers.
    BORROW = 1;
  }
  // The type of the reward token.
  RewardTokenType type = 3;
}

message LiquidityPoolFee {
  // " { Fee type }-{ Pool address } "
  string id = 1;

  // Fee as a percentage of the trade (swap) amount. Does not always apply.
  optional string feePercentage = 2;

  enum LiquidityPoolFeeType {
    // Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.
    FIXED_TRADING_FEE = 0;
  
    // Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.
    TIERED_TRADING_FEE = 1;
  
    // Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
    DYNAMIC_TRADING_FEE = 2;
  
    // Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.
    FIXED_LP_FEE = 3;
  
    // Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
    DYNAMIC_LP_FEE = 4;
  
    // Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.
    FIXED_PROTOCOL_FEE = 5;
  
    // Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
    DYNAMIC_PROTOCOL_FEE = 6;
  
    // One-time fee charged by the protocol during deposit, in percentages of the deposit token.
    DEPOSIT_FEE = 7;
  
    // One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token.
    WITHDRAWAL_FEE = 8;
  }

  // Type of fee this pool uses.
  LiquidityPoolFeeType feeType = 3;
}

message Pool {
  // Smart contract address of the pool
  string address = 1;

  // Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  string name = 2;

  // Symbol of liquidity pool (e.g. 3CRV)
  string symbol = 3;

  // Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  repeated Token input_tokens = 4;

  // Token that is minted to track ownership of position in protocol
  Token output_token = 5;

  // Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
  repeated RewardToken rewardTokens = 6;

  // Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. )
  repeated LiquidityPoolFee fees = 7;

  // Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
  bool is_single_sided = 8;

  // Creation timestamp
  uint64 created_timestamp = 9;

  // Creation block number
  uint64 created_block_number = 10;

  // ##### Quantitative Data #####

  // Current TVL (Total Value Locked) of this pool, in USD.
  string total_value_locked_USD = 11;

  // All revenue generated by the liquidity pool, accrued to the supply side.
  string cumulative_supply_side_revenue_USD = 12;

  // All revenue generated by the liquidity pool, accrued to the protocol.
  string cumulative_protocol_side_revenue_USD = 13;

  // All revenue generated by the liquidity pool.
  string cumulative_total_revenue_USD = 14;

  // All historical trade volume occurred in this pool, in USD.
  string cumulative_volume_USD = 15;

  // Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
  repeated uint64 input_token_balances = 16;

  // Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  repeated string input_token_weights = 17;

  // Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor).
  uint64 output_token_supply = 18;

  // Price per share of output token in USD.
  string output_token_price_USD = 19; 

  // Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  uint64 staked_output_token_amount = 20;

  // Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  repeated uint64 reward_token_emissions_amount = 21;

  // Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  repeated string reward_token_emissions_USD = 22;

  // ##### Snapshots #####

  // " Liquidity pool daily snapshots "
  // dailySnapshots: [LiquidityPoolDailySnapshot!]! @derivedFrom(field: "pool")

  // " Liquidity pool hourly snapshots "
  // hourlySnapshots: [LiquidityPoolHourlySnapshot!]! @derivedFrom(field: "pool")

  // ##### Events #####

  // All deposit (add liquidity) events occurred in this pool.
  repeated Deposit deposits = 25;

  // All withdraw (remove liquidity) events occurred in this pool.
  repeated Withdraw withdraws = 26;

  // All trade (swap) events occurred in this pool.
  repeated Swap swaps = 27;
}

message Pools {
  repeated Pool pool = 1;
}

message Deposit {
  // Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
  repeated Token input_tokens = 10;

  // Output token of the pool. E.g. the UNI-LP token.
  Token output_token = 11;

  // Amount of input tokens in the token's native unit.
  repeated uint64 input_token_amounts = 12;

  // Amount of output tokens in the token's native unit.
  optional uint64 output_token_amount = 13;

  // USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  string amount_USD = 14;
}

message Withdraw {
  // Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
  repeated Token input_tokens = 10;

  // Output token of the pool. E.g. the UNI-LP token.
  Token output_token = 11;

  // Amount of input tokens in the token's native unit.
  repeated uint64 input_token_amounts = 12;

  // Amount of output tokens in the token's native unit.
  optional uint64 output_token_amount = 13;

  // USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  string amount_USD = 14;
}

message Swap {
  // Token deposited into pool.
  Token token_in = 10;

  // Amount of token deposited into pool in native units.
  uint64 amount_in = 11;

  // Amount of token deposited into pool in USD.
  string amount_in_USD = 12;

  // Token withdrawn from pool.
  Token token_out = 13;

  // Amount of token withdrawn from pool in native units.
  uint64 amount_out = 14;

  // Amount of token withdrawn from pool in USD.
  string amount_out_USD = 15;
}

message UsageEvent {
  // Transaction hash of the transaction that emitted this event.
  string hash = 1;

  // Event log index. For transactions that don't emit event, create arbitrary index starting from 0,
  uint64 logIndex = 2;

  // The protocol this transaction belongs to.
  string protocol = 3;

  // Address that received the tokens.
  string to = 4;

  // Address that sent the tokens.
  string from = 5;

  // Block number of this event.
  uint64 block_number = 6;

  // Timestamp of this event.
  uint64 timestamp = 7;

  // The pool involving this transaction.
  string pool = 8;

  oneof EventType {
    Deposit deposit = 9;
    Withdraw withdraw = 10;
    Swap swap = 11;
  };
}
