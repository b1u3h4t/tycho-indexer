name: Build Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - patch/*
      - tl/ENG-1690-add-build-and-release-steps
  release:
    types:
      - prereleased
      - released

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: 'arn:aws:iam::827659017777:role/github-actions'
          audience: sts.amazonaws.com
          aws-region: eu-central-1

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get next version
        uses: reecetech/version-increment@2023.10.1
        id: version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 'Build, tag, and push image to Amazon ECR'
        env:
          ECR_REGISTRY: 827659017777.dkr.ecr.eu-central-1.amazonaws.com
          ECR_REPOSITORY: tycho-indexer
          ECR_BUILD_CACHE_REPOSITORY: build-cache
        run: >
          COMMIT_COUNT=$(git rev-list $(git describe --tags --abbrev=0)..HEAD
          --count)

          if [ "$COMMIT_COUNT" -ne "0" ]; then
              CONTAINER_TAG=${{ steps.version.outputs.version }}
          else
              CONTAINER_TAG=$(git describe --tags --abbrev=0)
          fi


          CHECK_IMAGE=$(aws ecr describe-images --repository-name
          $ECR_REPOSITORY --image-ids imageTag=$CONTAINER_TAG --region
          eu-central-1 || true)

          if [ -z "$CHECK_IMAGE" ]; then
              docker buildx build --push -t $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_TAG \
              --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=$ECR_REGISTRY/$ECR_BUILD_CACHE_REPOSITORY:tycho-indexer \
              --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_BUILD_CACHE_REPOSITORY:tycho-indexer .
          
          else
            echo "$ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_TAG already present - build skipped"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false


      - name: Extract Binary
        run: |
          # Start a container in the background
          CONTAINER_ID=$(docker create $ECR_REGISTRY/$ECR_REPOSITORY:$CONTAINER_TAG)
          
          # Copy the binary from the container to the host
          docker cp $CONTAINER_ID:/path/to/your/binary/tycho-client ./tycho-client
          
          # Stop and remove the container
          docker rm $CONTAINER_ID

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tycho-client
          asset_name: tycho-client
          asset_content_type: application/octet-stream
