tycho
└── docs.propellerheads.xyz
    └── tycho
        ├── for-dexs
        │   └── protocol-integration
        │       ├── contributing-guidelines
        │       ├── execution
        │       ├── indexing
        │       │   ├── 1.-setup
        │       │   ├── 2.-implementation
        │       │   ├── 3.-testing
        │       │   ├── common-problems-and-patterns
        │       │   │   ├── custom-protobuf-models
        │       │   │   ├── normalizing-relative-erc20-balances
        │       │   │   ├── tracking-components
        │       │   │   └── tracking-contract-storage
        │       │   ├── overview
        │       │   └── reserved-attributes
        │       └── simulation
        │           └── ethereum-solidity
        ├── for-solvers
        │   ├── execution
        │   │   ├── contract-addresses
        │   │   ├── encoding
        │   │   └── executing
        │   ├── indexer
        │   │   └── clients
        │   ├── quickstart
        │   ├── simulation
        │   └── supported-protocols
        ├── index.html
        └── overview
            └── how-to-contribute
                └── bounties

Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/index.html

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * What is Tycho?
  * Ending the integration nightmare
  * Get started
  * Solvers – Access more liquidity
  * DEXs – Get more flow
  * Components of Tycho
  * FAQ

# Overview

Overview of Tycho, its components and how to get started.

[NextHow to Contribute](/tycho/overview/how-to-contribute)

Last updated 6 hours ago

##

What is Tycho?

Tycho is an open-source interface to on-chain liquidity. Tycho

  * **Indexes** DEX protocol state for you with low latency,

  * **Simulates** swaps extremely fast with one interface for all DEXs, and 

  * **Executes** swaps on-chain

##

Ending the integration nightmare

Integrations are the largest point of friction for both DEXs and Solvers:

  * **Solvers** can't scale integrations. So, Solvers spend much of their time on integrations, and new solvers can't catch up and compete.

  * **DEXs** need to convince solvers to integrate them to get orderflow and win LPs. But Solvers prioritize DEXs with liquidity. This makes it hard for new DEXs to get the flow their design deserves.

In the end, every solver separately integrates every DEX – leading to massive
wasted effort from which no one benefits.

Tycho fixes this:

  * DEXs can integrate themselves and don't need to wait for solvers, and

  * Solvers can use new DEXs without any additional effort.

Tycho lowers barriers to entry so that both innovative DEXs and Solvers have a
chance to win flow.

##

Get started

###

Solvers – Access more liquidity

Tycho makes it easy to simulate and execute over on-chain liquidity sources –
without needing to understand protocol internals, run nodes, or do RPC calls.

To set up, go to the [Tycho Indexer quickstart](/tycho/for-solvers/indexer)
and start your liquidity stream.

###

DEXs – Get more flow

To integrate your DEX, submit a PR to Tycho Protocol Integrations on
[GitHub](https://github.com/propeller-heads/tycho-protocol-sdk).

To get started, check the [Protocol SDK ](/tycho/for-dexs/protocol-
integration)docs.

Or [contact our team](https://t.me/jaintanay_) so we can help you integrate.

##

Components of Tycho

Tycho has three components for solvers:

  * **Tycho Indexer** : Infrastructure to parse, store and stream protocol state deltas. It also comes with clients in Python and Rust and a hosted webstream if you don't want to run your version of the Indexer. -> [Indexer docs](/tycho/for-solvers/indexer).

  * **Tycho Protocol Simulation:** A simulation library with a unified interface to query swaps and prices**.** Optimized for speed, running on compiled contracts in REVM with in-memory storage. -> [Protocol Simulation docs](/tycho/for-solvers/simulation).

  * **Tycho Execution:** Audited and gas-efficient router and DEX executor contracts for safe, simple, and competitive execution of swaps.

And one integration SDK for DEXs:

  * **Tycho Protocol Integration:** An SDK for any DEX (or Stable Coin, LRT, etc.) to integrate their liquidity and receive flow from solvers. 

##

FAQ

**How does Tycho compare to just parsing logs myself?**

While you can parse logs directly, Tycho provides parsed, and structured data,
offers a unified interface across protocols, manages reorgs automatically, can
handle protocols that don't emit logs and saves you the infrastructure cost of
running a node.

**Does this add gas to my swaps?**

No it does not. Tycho contracts make it easy to simulate a DEX correctly for
your swaps. But you can still execute the swaps directly with the DEX – as gas
efficient as possible.

**How do you handle reorgs?**

Reorgs are handled automatically through our delta system. The client
maintains the correct state without you having to worry about block
reorganizations.

**How does latency compare to other solutions?**

Tycho processes updates in under 100ms (plus network latency). While an
additional hop compared to running your own nodes, geographically distributed
nodes race to provide data, which can be faster than relying on a single node.

**Can I still use my own UniV2/V3 implementations?**

Yes! Many teams use Tycho VM for newer/complex protocols while keeping their
analytical implementations for simpler pools.

**What about UniV4 hooks?**

We aim to support as many hooks variants as possible through our VM
implementation.

**What 's the difference between Native and VM implementations?**

Native implementations provide protocol-specific state variables directly,
letting you implement your own math and optimizations. VM implementations
provide a unified interface through REVM, making integration easier but with
less low-level control. Choose based on your needs. Native for maximum
control, VM for easier integration.

**How reliable is the state data?**

The system handles reorgs automatically, keeps track of TVL changes, and
maintains consistency across state updates. The data is synced against on-
chain state and continuously validated.

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FQVmrNuLPh9tt7kO3eIus%252FTycho-
header.png%3Falt%3Dmedia%26token%3D5645c9f3-5cd0-441a-8f3c-4b1d0943ef20&width=768&dpr=4&quality=100&sign=8abccf8b&sv=2)

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252F5s7AgVNUMv5deJO6EWiA%252Fimage.png%3Falt%3Dmedia%26token%3Dc26a9e27-8cc7-4ecc-b60e-43a1727263b2&width=768&dpr=4&quality=100&sign=a99b52fc&sv=2)

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FVuPiEb40yZwOKvsWbkpt%252Ftycho.png%3Falt%3Dmedia%26token%3D4804354f-abe0-43d5-8915-f78bae2874ae&width=768&dpr=4&quality=100&sign=2ba39379&sv=2)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/simulation

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Introduction
  * Main Interface
  * Example Use Case: Token Price Printer

  1. [For Solvers](/tycho/for-solvers)

# Simulation

Simulate interactions with any protocol.

[PreviousClients](/tycho/for-
solvers/indexer/clients)[NextExecution](/tycho/for-solvers/execution)

Last updated 22 days ago

##

**Introduction**

Tycho Simulation is a Rust crate that provides powerful tools for
**interacting with protocol states** , **calculating spot prices** , and
**simulating token swaps**.

The repository is available [here](https://github.com/propeller-heads/tycho-
simulation).

###

Main Interface

All protocols implement the `ProtocolSim` trait (see definition
[here](https://github.com/propeller-heads/tycho-
simulation/blob/4e6192285302658c8677bd0582dae3af53aba639/src/protocol/state.rs#L63)).
It has the main methods:

####

Spot price

`spot_price` gives you the pool's current marginal price.

Copy

    
    
    fn spot_price(&self, base: &Token, quote: &Token) -> Result<f64, SimulationError>;

####

Get amount out

`get_amount_out` simulates token swaps.

Copy

    
    
    fn get_amount_out(
        &self,
        amount_in: BigUint,
        token_in: &Token,
        token_out: &Token,
    ) -> Result<GetAmountOutResult, SimulationError>;

You receive a `GetAmountOutResult` , which is defined as follows:

Copy

    
    
    pub struct GetAmountOutResult {
        pub amount: BigUint, // token_out amount you receive
        pub gas: BigUint, // gas cost
        pub new_state: Box<dyn ProtocolSim>, // state of the protocol after the swap
    }

`new state` allows you to, for example, simulate consecutive swaps in the same
protocol.

Please refer to the in-code documentation of the `ProtocolSim` trait and its
methods for more in-depth information.

###

Example Use Case: Token Price Printer

You can find an example of a **price printer**
[here](https://github.com/propeller-heads/tycho-
simulation/tree/main/examples).

Clone the repo, then run:

Copy

    
    
    export RPC_URL=<your-eth-rpc-url>
    cargo run --release --example price_printer -- --tvl-threshold 1000

You'll need an RPC to fetch some static protocol info. You can use any RPC
provider – e.g. set one up with [Infura](https://www.infura.io/).

You will see a UI where you can select any pool, press enter, and simulate
different trade amounts on the pool.

The program prints logs automatically to a file in the `logs` directory in the
repo.

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FoJrr2E2ot9WpcYzlH57d%252Fimage.png%3Falt%3Dmedia%26token%3D2f22a4a0-42ef-4f92-ad9e-2abdd319547b&width=768&dpr=4&quality=100&sign=8e2ed7a&sv=2)

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FgrhisKaxxCNc3nWadoOM%252FCLIGIF2_compressed.gif%3Falt%3Dmedia%26token%3D4d3bf8c6-8586-4395-8edc-968dda7caaff&width=768&dpr=4&quality=100&sign=93e7f1b3&sv=2)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/quickstart

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Run the Quickstart
  * What it does
  * How the Quickstart works
  * 1\. Set up
  * 2\. Connect to Tycho Indexer
  * 3\. Simulate swap
  * 4\. Encode a swap
  * 5\. Simulate or execute the best swap
  * Run this quickstart independently
  * Recap
  * What's next?

  1. [For Solvers](/tycho/for-solvers)

# Quickstart

A quickstart to swap on chain. By the end of this quickstart, you will:

  * Fetch real-time market data from Tycho Indexer.

  * Simulate swaps between token pairs to calculate **spot prices** and **output amounts** using Tycho Simulation.

  * Encode the best trade, for a certain token pair, and simulate or execute it using Tycho Execution.

##

Run the Quickstart

Clone the [Tycho Simulation repository](https://github.com/propeller-
heads/tycho-simulation); you'll find [the
quickstart](https://github.com/propeller-heads/tycho-
simulation/blob/main/examples/quickstart/main.rs) code there.

To run the quickstart, run the following commands:

Copy

    
    
    export RPC_URL=<your-eth-rpc-url>
    cargo run --release --example quickstart 

If you don't have an RPC URL, [here](https://ethereumnodes.com/) is a list of
public ones.

###

What it does

The quickstart fetches all protocol states and returns you the best amount out
(best price) for a given token pair (by default, 1 WETH to USDC).

Additionally, it returns calldata to execute the swap on this pool with the
Tycho Router.

You should see an output like the following:

Copy

    
    
    Looking for the best swap for 1 WETH -> USDC
    ==================== Received block 21937897 ====================
    The best swap (out of 6 possible pools) is:
    protocol: "uniswap_v3"
    id: "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
    swap: 1000000000000000000 WETH -> 2351701017 USDC
    Signer private key was not provided. Skipping simulation/execution...

If you would like to see the results for a different token or amount, you can
set additional flags:

Copy

    
    
    cargo run --release --example quickstart -- --sell-token "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" --buy-token "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599" --sell-amount 10000

This example would look for the best swap for 10 000 USDC -> WBTC.

####

Logs

If you would like to see all the Tycho Indexer and Simulation logs run with
`RUST_LOG=info`:

Copy

    
    
    RUST_LOG=info cargo run --release --example quickstart

##

How the Quickstart works

The quickstart is a minimal example of how to:

  1. **Setup and load** necessary data (such as available tokens).

  2. **Connect to the Tycho Indexer** to fetch on-chain protocol data (e.g., Uniswap V2, Balancer V2) and **build a Protocol Stream** that streams updates (like new pools, states) in real-time.

  3. **Simulate** swaps on all available pools for a specified pair (e.g. USDC, WETH), and print out the most USDC you can get for 1 WETH.

  4. **Encode** a swap to swap 1 WETH against the best pool.

  5. **Execute** the swap against the Tycho Router.

###

1\. Set up

To run Tycho Indexer, set up the following environment variables:

  * URL (by default `"tycho-beta.propellerheads.xyz"`)

  * API key (by default, the test key is `sampletoken`)

  * TVL threshold: A filter to only get snapshot data for pools with TVL greater than the specified threshold (in ETH). Here, the default is **10,000 ETH** to limit the data you pull.

The Indexer stream or the Simulation does not manage tokens; you must manage
them.

To simplify this, `load_all_tokens` gets all current token information from
Tycho Indexer RPC for you.

###

2\. Connect to Tycho Indexer

The protocol stream connects to Tycho Indexer to fetch the real-time state of
protocols.

Copy

    
    
    let mut protocol_stream = ProtocolStreamBuilder::new(&tycho_url, Chain::Ethereum)
        .exchange::<UniswapV2State>("uniswap_v2", tvl_filter.clone(), None)
        .exchange::<EVMPoolState<PreCachedDB>>(
            "vm:balancer_v2",
            tvl_filter.clone(),
            Some(balancer_pool_filter),
        )
        .auth_key(Some(tycho_api_key.clone()))
        .set_tokens(all_tokens.clone())
        .await
        .build()
        .await
        .expect("Failed building protocol stream");

Here, you subscribe to Uniswap V2 and Balancer V2 only. To include additional
protocols like Uniswap V3, simply add:

Copy

    
    
    .exchange::<UniswapV3State>("uniswap_v3", tvl_filter.clone(), None)

Note: The protocol stream will give you all protocol states only in the first
`BlockUpdate` object. All subsequent `BlockUpdates` contain only new and
changed protocol states (i.e., deltas).

###

3\. Simulate swap

`get_best_swap` uses Tycho Simulation to simulate swaps and calculate buy
amounts. We inspect all**protocols** updated in the current block (i.e. those
with balance changes).

####

a. Simulating token swaps

Copy

    
    
    let result = state.get_amount_out(amount_in, &tokens[0], &tokens[1])

`result` is a `GetAmountOutResult` that has information on the amount out, gas
cost, and the new state of the protocol. For example, if you want to do
another swap after this one, you could do

Copy

    
    
    let other_result = result.new_state.get_amount_out(other_amount_in, &tokens[0], &tokens[1])

By inspecting each of the amount outs, we then choose the protocol component
that gives us the highest amount out.

###

4\. Encode a swap

After choosing the best swap, we can proceed to use Tycho Execution to encode
it.

**a. Create encoder**

Copy

    
    
    let encoder = EVMEncoderBuilder::new()
        .chain(Chain::Ethereum)
        .tycho_router_with_permit2(None, cli.swapper_pk.clone())
        .expect("Failed to create encoder builder")
        .build()
        .expect("Failed to build encoder");

####

b. Create a solution object

Knowing the best protocol component (i.e., pool), we can now put the swap into
the expected input format for our encoder. For more info about the `Swap` and
`Solution` models, please have a look [here](/tycho/for-
solvers/execution/encoding#solution-struct).

Copy

    
    
    let simple_swap = Swap::new(
        protocol_component,
        sell_token.address.clone(),
        buy_token.address.clone(),
        // Split defines the fraction of the amount to be swapped.
        0f64,
    );
    
    let solution = Solution {
        sender: user_address.clone(),
        receiver: user_address,
        given_token: sell_token.address,
        given_amount: sell_amount,
        checked_token: buy_token.address,
        exact_out: false,   
        checked_amount: None, ion
        swaps: vec![simple_swap],
        router_address: Bytes::from_str("0xFfA5ec2e444e4285108e4a17b82dA495c178427B").expect("Failed to create router address"),
        ..Default::default()
    };

####

c. Encode swap

Copy

    
    
    let tx = encoder
        .encode_router_calldata(vec![solution])
        .expect("Failed to encode router calldata")[0];

###

5\. Simulate or execute the best swap

This step allows you to test or perform real transactions based on the best
available swap options. To be able to do this step, you need to pass your
wallet's private key in the run command. Handle it securely and never expose
it publicly.

Copy

    
    
    cargo run --release --example quickstart -- --swapper-pk "your-key"

You'll encounter the following prompt:

Copy

    
    
    Do you want to simulate, execute or skip this swap?
    Please be aware that the market might move while you make your decision. Which might lead to a revert if you've set a min amount out or slippage.
    (simulate/execute/skip): 

You have three options:

  1. `simulate`**:** Tests the swap without executing it on-chain. It will simulate an approval (for permit2) and a swap transaction on the node. You will see something similar to this:

Copy

    
    
    (simulate/execute/skip): simulate
    Simulating by performing an approval (for permit2) and a swap transaction...
    Simulated Block 21937944:
      Transaction 1: Status: true, Gas Used: 45992
      Transaction 2: Status: false, Gas Used: 66574

If status is `false`, the simulation has failed. You can print the full
simulation output for detailed failure information.

  1. `execute`**:** Performs the swap on-chain using your real funds. The process involves performing an approval (for permit2) and a swap transaction. You'll receive transaction hashes and statuses like:

Copy

    
    
    (simulate/execute/skip): execute
    Executing by performing an approval (for permit2) and a swap transaction...
    Approval transaction sent with hash: 0x267fc0027c861bd740d9752fde2d3b44c6db148c3da7c4fbab082feeb484bb89 and status: true
    Swap transaction sent with hash: 0x330458ba7805a9647fa08f3bf4c7634f8975f1ea7d2b3e3e135916ddbcc90926 and status: true

If status is `false`, the execution failed. Use the transaction hash on
platforms like Etherscan or Tenderly to investigate the failure.

  1. `skip`**:** Ignores this swap and the program resumes listening for blocks.

Market conditions can change rapidly. Delays in making your decision might
lead to transaction reverts, especially if you've set parameters like minimum
amount out or slippage. Always ensure you're comfortable with the potential
risks before executing swaps.

##

Run this quickstart independently

If you want to run this quickstart outside of the Tycho Simulation repository,
please add to your project's `Cargo.toml` the following requirements:

Copy

    
    
    tycho-simulation = { git = "https://github.com/propeller-heads/tycho-simulation.git", package = "tycho-simulation", features = ["evm"] }
    tokio = "1.42.0"
    futures = "0.3.31"
    tracing-subscriber = "0.3.19"
    num-bigint = "0.4.6"

###

Recap

In this quickstart, you explored how to use Tycho to:

  1. **Connect to the Tycho Indexer** : Retrieve real-time protocol data filtered by TVL.

  2. **Fetch Token and Pool Data** : Load all token details and process protocol updates.

  3. **Simulate Token Swaps** : Compute the output amount, gas cost, and updated protocol state for a swap.

  4. **Encode a Swap:** Create a solution from the best pool state and retrieve calldata to execute against a Tycho router.

  5. **Execute a Swap:** Execute the best trade using the Tycho Router.

###

What's next?

To dive deeper:

  * **Integrate with your Solver** : Add Tycho pool liquidity to your solver, starting from this [guide](/tycho/for-dexs/protocol-integration).

  * **Learn more about**[**Tycho Execution**](/tycho/for-solvers/execution): Read more about the datatypes necessary to encode an execution against a Tycho router or executor.

  * **Learn more about**[**Tycho Simulation**](/tycho/for-solvers/simulation): Explore advanced features like custom filters, protocol-specific simulations, and state transitions.

  * **Explore**[**Tycho Indexer**](/tycho/for-solvers/indexer): To add or modify the data Tyho indexes.

[PreviousBounties](/tycho/overview/how-to-
contribute/bounties)[NextIndexer](/tycho/for-solvers/indexer)

Last updated 4 hours ago

**Important Note**

⚠️




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/supported-protocols

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For Solvers](/tycho/for-solvers)

# Supported Protocols

Currently, Tycho supports the following protocols:

Protocol

Integration Type

Simulation Time

`uniswap_v2`, `sushiswap_v2`,

`pancakeswap_v2`,

Native

1 μs (0.001 ms)

`uniswap_v3`

Native

20 μs

`uniswap_v4`

Native

3 μs

`vm:balancer_v2`

VM

0.5 ms

`vm:curve`

VM

1 ms

**Live tracker & Upcoming protocols**

  * Currently supported protocols and Tycho status: <http://tycho.live/>

  * [List of upcoming protocols](https://docs.google.com/spreadsheets/d/1vDl57BthpeJ9WDqmCVXFdLLvmsm-_SwhSjVzobXJZ04/edit?usp=sharing).

###

VM v.s. Native

There are two types of implementations:

  * **Native** protocols are ported to Rust – for faster simulation.

  * **VM** protocols execute the VM bytecode locally – which is easier to integrate but has slower simulation times than a native implementation.

Interested in adding a protocol? Refer to the [Tycho Simulation for
DEXs](https://app.gitbook.com/o/9wMvRDQIhk1xOsIZ0Zde/s/jrIe0oInIEt65tHqWn2w/~/changes/8/for-
dexs/tycho-simulation) documentation for implementation guidelines.

[PreviousContract Addresses](/tycho/for-solvers/execution/contract-
addresses)[NextProtocol Integration](/tycho/for-dexs/protocol-integration)

Last updated 3 days ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/execution/contract-addresses

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For Solvers](/tycho/for-solvers)
  2. [Execution](/tycho/for-solvers/execution)

# Contract Addresses

[PreviousExecuting](/tycho/for-solvers/execution/executing)[NextSupported
Protocols](/tycho/for-solvers/supported-protocols)

Last updated 3 hours ago

##

Ethereum

Contract

Address

[TychoRouter](https://github.com/propeller-heads/tycho-
execution/blob/4b089103448fc807dbf1366e2cb77cbfbd49f2db/foundry/src/TychoRouter.sol)

[0x023eea66B260FA2E109B0764774837629cC41FeF](https://etherscan.io/address/0x023eea66B260FA2E109B0764774837629cC41FeF)

[UniswapV2Executor](https://github.com/propeller-heads/tycho-
execution/blob/4b089103448fc807dbf1366e2cb77cbfbd49f2db/foundry/src/executors/UniswapV2Executor.sol)

[0xf6c5be66FFf9DC69962d73da0A617a827c382329](https://etherscan.io/address/0xf6c5be66FFf9DC69962d73da0A617a827c382329)

[UniswapV3Executor](https://github.com/propeller-heads/tycho-
execution/blob/4b089103448fc807dbf1366e2cb77cbfbd49f2db/foundry/src/executors/UniswapV3Executor.sol)

[0xdD8559c917393FC8DD2b4dD289c52Ff445fDE1B0](https://etherscan.io/address/0xf6c5be66FFf9DC69962d73da0A617a827c382329)

[UniswapV4Executor](https://github.com/propeller-heads/tycho-
execution/blob/4b089103448fc807dbf1366e2cb77cbfbd49f2db/foundry/src/executors/UniswapV4Executor.sol)

[0x042C0ebBEAb9d9987c2f64Ee05f2B3aeB86eAf70](https://etherscan.io/address/0x042C0ebBEAb9d9987c2f64Ee05f2B3aeB86eAf70)

[BalancerV2Executor](https://github.com/propeller-heads/tycho-
execution/blob/4b089103448fc807dbf1366e2cb77cbfbd49f2db/foundry/src/executors/BalancerV2Executor.sol)

[0x00BE8EfAE40219Ff76287b0F9b9e497942f5BC91](https://etherscan.io/address/0x00BE8EfAE40219Ff76287b0F9b9e497942f5BC91)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/execution/executing

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Tycho Router
  * Executing Directly to the Executor Contract

  1. [For Solvers](/tycho/for-solvers)
  2. [Execution](/tycho/for-solvers/execution)

# Executing

Once you have the calldata from****[Encoding](/tycho/for-
solvers/execution/executing#encoding-a-solution), you can execute your trade
in one of two ways:

  1. **Via the Tycho Router** – Execute trades through our audited router for seamless execution.

  2. **Directly to the Executor** – Bypass the Tycho Router and execute the trade using your own router.

##

Tycho Router

The source code for the Tycho Router is [here](https://github.com/propeller-
heads/tycho-execution/blob/main/foundry/src/TychoRouter.sol#L24) (see contract
addresses [here](/tycho/for-solvers/execution/contract-addresses)). To execute
a trade, simply send the calldata generated by the `TychoEncoder` to the
router. If you chose to encode your data without permit2 for token approval
and transferring, then you need to send the tokens to our router beforehand.

For an example of how to execute trades using the Tycho Router, refer to the
[Quickstart](/tycho/for-solvers/quickstart#id-5.-execute-the-best-swap).

##

Executing Directly to the Executor Contract

If you use the Execution Strategy (see [here](/tycho/for-
solvers/execution/encoding#encoders) how to select strategies), you will
receive only the calldata for a **single swap** without any Tycho Router-
specific data.

This provides greater control on the token transfers and approvals. But also
gives you greater responsibility to make sure that the swap was executed
correctly. You are responsible for**token approvals, token transfers and error
handling** in your execution flow.

You need to integrate Tycho Executors into your **own router contract**.
Implement a mechanism similar to our
[`Dispatcher`](https://github.com/propeller-heads/tycho-
execution/blob/30a7d5bbe43fa0561ca81632157bd60ec11c361d/foundry/src/Dispatcher.sol#L23),
which uses **delegate calls** to interact with the `Executor` contracts.

Steps to integrate Tycho Executors into your own router:

  1. Implement something similar to Dispatcher that routes calldata to the correct `Executor` contract.

  2. Ensure that your router contract correctly manages token approvals and transfers.

  3. Append the calldata for the swap to your overall execution flow.

**⚠️ Security Considerations**

Tycho's Router has been audited, and its entire execution flow has been
verified. However, when using `direct_execution`, Tycho is **not responsible**
for security checks, validation, or execution guarantees. You assume full
responsibility for managing token approvals, transfers, and error handling.
Ensure that your router contract implements the necessary security measures to
prevent reentrancy, slippage manipulation, or loss of funds.

[PreviousEncoding](/tycho/for-solvers/execution/encoding)[NextContract
Addresses](/tycho/for-solvers/execution/contract-addresses)

Last updated 3 hours ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/execution/encoding

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Encoders
  * Builder
  * Strategy
  * Models
  * Solution Struct
  * Swap Struct
  * Swap Group
  * Example Solution
  * Transaction struct
  * Run as a Binary
  * Installation
  * Commands
  * Encoding Transactions

  1. [For Solvers](/tycho/for-solvers)
  2. [Execution](/tycho/for-solvers/execution)

# Encoding

The first step to execute a trade on chain is encoding.

Our Rust [crate](https://github.com/propeller-heads/tycho-
execution/tree/main/src) offers functionality to convert your trades into
calldata, which the Tycho contracts can execute.

See this [Quickstart](/tycho/for-solvers/quickstart#id-4.-encode-a-swap)
section for an example of how to encode your trade.

##

Encoders

###

Builder

To create an [`EVMTychoEncoder`](https://github.com/propeller-heads/tycho-
execution/blob/30a7d5bbe43fa0561ca81632157bd60ec11c361d/src/encoding/evm/tycho_encoder.rs#L17),
you need to use an [`EVMEncoderBuilder`](https://github.com/propeller-
heads/tycho-
execution/blob/30a7d5bbe43fa0561ca81632157bd60ec11c361d/src/encoding/evm/encoder_builder.rs#L16).
A valid encoder needs to have a chain and a strategy encoder set. More info
about the strategies can be found [here](/tycho/for-
solvers/execution/encoding#strategy).

To simplify the setup, we provide **shortcut methods** for common use cases:

  * `tycho_router`: Uses the **TychoRouter** contract, assuming that you transfer the input token to the contract in the same transaction.

  * `tycho_router_permit2`: Uses **Permit2** for token approvals and transfers. This method requires a **signer private key**.

  * `direct_execution`: Generates calldata for direct execution via the **Executor contracts** , bypassing the Tycho router. This is useful if you're integrating **Tycho Executors** with your own routing logic. See more details here.

####

**Example Usage**

Copy

    
    
    let encoder = EVMEncoderBuilder::new()
        .chain(Chain::Ethereum)
        .tycho_router(None)
        .expect("Failed to create encoder builder")
        .build()
        .expect("Failed to build encoder");

###

Strategy

When initializing the **EVMEncoderBuilder** , you must define a **strategy**.
The strategy determines how the trade is encoded.

Currently, we support two encoding strategies:

  * **Split Swap Strategy:** Enables **multi-hop** trade execution via the **Tycho Router**. Supports [split swap](/tycho/for-solvers/execution/encoding#split-swaps) solutions.

  * **Executor Strategy:** Generates calldata for direct execution via the **Executor contracts** (no router interaction). Supports **multi-swap** trades only if all swaps can be compressed into a single [Swap Group](/tycho/for-solvers/execution/encoding#swap-group), otherwise, only**single-hop** trades are supported.

##

Models

###

Solution Struct

The `Solution` struct specifies the details of your order and how it should be
filled. This is the input of the encoding module.

The `Solution` struct consists of the following attributes:

Attribute

Type

Description

**given_token**

`Bytes`

The token being sold (exact in) or bought (exact out)

**given_amount**

`BigUint`

Amount of the given token

**checked_token**

`Bytes`

The token being bought (exact in) or sold (exact out). This token's final
balance will be checked by the router if you provide a `checked_amount`.

**sender**

`Bytes`

Address of the sender of the given token

**receiver**

`Bytes`

Address of the receiver of the checked token

**exact_out**

`bool`

False if the solution is an exact input solution (i.e. solves a sell order).
**Currently only exact input solutions are supported**.

**router_address**

`Bytes`

Address of the router contract to be used.

**swaps**

`Vec<Swap>`

List of swaps to fulfill the solution.

**slippage**

`Option<f64>`

If set, this value will be applied to `expected_amount` and will become the
checked_amount if greater than the user-inputted `checked_amount` (exact in)
or less than the user-inputted `checked_amount` (exact out).

**expected_amount**

`Option<BigUint>`

Amount expected to receive (exact in) or pay (exact out) for this solution.
Slippage is applied onto this amount.

**checked_amount**

`Option<BigUint>`

Minimum amount out (exact in) or maximum amount in (exact out) to be checked
for the solution to be valid. If not set, no checks will be performed.

**native_action**

`Option<NativeAction>`

####

Wrapping and Unwrapping

Our router accepts wrapping native tokens to wrapped token before performing
the first swap, and unwrapping wrapped tokens to native tokens after the final
swap, before sending the funds to the receiver.

In order to perform this, the `native_action` parameter of the solution must
be set to either `Some(NativeAction.WRAP)` or `Some(NativeAction.UNWRAP)`.

When wrapping:

  * The `given_token` of the **solution** should be ETH

  * The `token_in` of the**first swap** should be WETH

When unwrapping:

  * The `checked_token` of the **solution** should be ETH

  * The `token_out` of the**final swap** should be WETH

###

Swap Struct

A solution consists of one or more swaps. A swap represents a swap operation
to be performed on a pool.

The `Swap` struct has the following attributes:

Attribute

Type

Description

**component**

`ProtocolComponent`

Protocol component from Tycho core

**token_in**

`Bytes`

Token you provide to the pool

**token_out**

`Bytes`

Token you expect from the pool

**split**

`f64`

Percentage of the amount in to be swapped in this operation (for example, 0.5
means 50%)

To create a `Swap`, use the `new` [function](https://github.com/propeller-
heads/tycho-
execution/blob/28bfe2e32aa175d8165f58f147f2dfc63240c81c/src/encoding/models.rs#L82)
where you can pass any struct that implements `Into<ProtocolComponent>` .

####

Split Swaps

Solutions can have splits where one or more token hops are split between two
or more pools. We perform internal validation on split swaps. A split swap is
considered valid if:

  1. The checked token is reachable from the given token through the swap path

  2. There are no tokens that are unconnected

  3. Each split amount is small than 1 (100%) and larger or equal to 0 (0%)

  4. For each set of splits, set the split for the last swap to 0. This tells the router to send all tokens not assigned to the previous splits in the set (i.e., the remainder) to this pool.

  5. The sum of all non-remainder splits for each token is smaller than 1 (100%)

###

Swap Group

Certain protocols, such as Uniswap V4, allow you to save token transfers
between consecutive swaps thanks to their flash accounting. In case your
solution contains sequential (non-split) swaps of such protocols, our encoders
compress these consecutive swaps into a single **swap group** , meaning that a
**single call to our executor** is sufficient for performing these multiple
swaps.

In the example above, the encoder will compress three consecutive swaps into
the following swap group to call the UniswapV4 executor:

Copy

    
    
    SwapGroup {
        input_token: weth_address,
        output_token: dai_address,
        protocol_system: "uniswap_v4",
        swaps: vec![weth_wbtc_swap, wbtc_usdc_swap, usdc_dai_swap],
        split: 0,
    }

One solution will contain multiple swap groups if different protocols are
used.

###

**Example Solution**

The following diagram shows a swap from ETH to DAI through USDC. ETH arrives
in the router and is wrapped to WETH. The solution then splits between three
(WETH, USDC) pools and finally swaps from USDC to DAI on one pool.

The `Solution` object for the given scenario would look as follows:

Copy

    
    
    swap_a = Swap::new(
        pool_a,
        weth_address,
        usdc_address,
        0.3, // 30% of WETH amount
    );
    swap_b = Swap::new(
        pool_b,
        weth_address,
        usdc_address,
        0.3, // 30% of WETH amount
    );
    swap_c = Swap::new(
        pool_c,
        weth_address,
        usdc_address,
        0f64, // Rest of remaining WETH amount
    );
    swap_d = Swap::new(
        pool_d,
        usdc,
        dai,
        0f64, // All of USDC amount
    );
    
    let solution = Solution {
        sender: user_address,
        receiver: user_address,
        given_token: eth_address,
        given_amount: sell_amount,
        checked_token: dai_address,
        exact_out: false, // Sell order
        router_address,
        slippage: None, // Do not perform slippage check
        expected_amount: None, // Do not perform slippage check
        check_amount: None, // Do not perform final checking
        swaps: vec![swap_a, swap_b, swap_c, swap_d],
        native_action: Some(NativeAction.WRAP) // Wrap ETH to WETH before first swap
        direct_executionL False, // Swap through Tycho router, not straight to executor
    };

###

**Transaction struct**

Encoding returns you a `Transaction`**** struct. It has the following
attributes:

Attribute

Type

Description

**to**

`Bytes`

The contract address to which you send the transaction.

**value**

`BigUint`

Amount of ETH to send (for native transactions)

**data**

`Vec<u8>`

The encoded calldata containing the swap details.

##

**Run as a Binary**

###

Installation

First, build and install the binary:

Copy

    
    
    # Build the project
    cargo build --release
    
    # Install the binary to your system
    cargo install --path .

After installation, you can use the `tycho-encode` command from any directory
in your terminal.

###

Commands

The command lets you choose the encoding strategy to be used. These correspond
to the shortcut methods of the [builder](/tycho/for-
solvers/execution/encoding#builder). The available strategies are:

  * `tycho-router`: Encodes a transaction using the Tycho Router encoding strategy. Requires a private key for signing Permit2.

  * `tycho-router-permit2`: Encodes a transaction using the Tycho Router encoding strategy. Requires a private key for signing Permit2.

  * `direct-execution`: Encodes a transaction using the direct execution encoding strategy. Does not require a private key.

###

Encoding Transactions

The commands accept the following options:

  * `--config_path`: Path to the executor addresses configuration file (defaults to `src/encoding/config/executor_addresses.json`)

  * `--swapper-pk`: Private key for signing approvals (required when direct_execution is false)

**Example**

Here's a complete example that encodes a swap from WETH to DAI using Uniswap
V2 and the Tycho Router strategy with Permit2:

Copy

    
    
    echo '{"sender":"0x1234567890123456789012345678901234567890","receiver":"0x1234567890123456789012345678901234567890","given_token":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2","given_amount":"1000000000000000000","checked_token":"0x6B175474E89094C44Da98b954EedeAC495271d0F","exact_out":false,"slippage":0.01,"expected_amount":"1000000000000000000","checked_amount":"990000000000000000","router_address":"0xaa820C29648D5EA543d712cC928377Bd7206a0E7","swaps":[{"component":{"id":"0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640","protocol_system":"uniswap_v2","protocol_type_name":"UniswapV2Pool","chain":"ethereum","tokens":["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],"contract_ids":["0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"],"static_attributes":{"factory":"0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f"},"change":"Update","creation_tx":"0x0000000000000000000000000000000000000000000000000000000000000000","created_at":"2024-02-28T12:00:00"},"token_in":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2","token_out":"0x6B175474E89094C44Da98b954EedeAC495271d0F","split":0.0}],"direct_execution":true}' | tycho-encode tycho-router-permit2 --swapper-pk 0x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234  

[PreviousExecution](/tycho/for-solvers/execution)[NextExecuting](/tycho/for-
solvers/execution/executing)

Last updated 2 days ago

If set, the native token will be wrapped before the swap or unwrapped after
the swap (more ).

[here](/tycho/for-solvers/execution/encoding#wrapping-and-unwrapping)

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FbIrkrIH6DG2A2p3lsDsx%252FScreenshot%25202025-02-21%2520at%252016.47.44.png%3Falt%3Dmedia%26token%3D6922b271-90b4-4de1-97d5-0ae9bcef9a61&width=768&dpr=4&quality=100&sign=fd1dd222&sv=2)

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252F3M1fxuX96E7dnkwT1Fzf%252FScreenshot%25202025-02-11%2520at%252009.47.06.png%3Falt%3Dmedia%26token%3Dfe30734e-5ffc-46b0-8369-7ecb10d04789&width=768&dpr=4&quality=100&sign=7bc7e26d&sv=2)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-solvers/indexer/clients

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Key Features
  * Getting Started
  * Message Types
  * Harness the Power of Tycho's RPC
  * Hosted Tycho: Try Our Beta Service
  * Learn More and Get Started

  1. [For Solvers](/tycho/for-solvers)
  2. [Indexer](/tycho/for-solvers/indexer)

# Clients

Tycho Client streams protocol state changes to you.

Tycho Client is available as a **Python package** and a **Rust crate.**

Tycho also offers a **precompiled binary** , making it easy to start in just a
few steps.

###

Key Features

  * **Real-Time Streaming** : Get low-latency updates to stay in sync with the latest protocol changes. Discover new pools as they’re created.

  * **TVL Filtering** : Receive updates only for pools with a TVL larger than your specified threshold (in ETH).

* * *

###

Getting Started

Follow this guide to set up and use the Tycho Client.

CLI BinaryRust CratePython Package

For a simple, setup-free start: download the latest binary release on
[GitHub](https://github.com/propeller-heads/tycho-indexer/releases), add it to
your PATH, and verify installation with:

Copy

    
    
    tycho-client -V

You should see the Tycho client version displayed. If you need more guidance,
refer to our detailed installation
[instructions](https://github.com/propeller-heads/tycho-
indexer/tree/main/tycho-client#installation).

Now, define the pools you want to track: For example, to track the Uniswap V2
and V3 pools with a minimum value locked of 100 ETH, run:

Copy

    
    
    tycho-client --exchange uniswap_v2 --exchange uniswap_v3 --min-tvl 100 --tycho-url {TYCHO_INDEXER_URL}

####

Authentication

For services where authentication is required, you can do this securely by
setting an environment variable for your token:

Copy

    
    
    export TYCHO_AUTH_TOKEN={your_token}

Or skip secure connections entirely with `--no-tls` for local setups [coming
soon].

####

Help and More Information

For more details on using the CLI, run:

Copy

    
    
    tycho client --help

The rust crate provides a flexible library for developers to integrate Tycho’s
real-time data into any Rust application.

To use Tycho Client in Rust, add the crate to your `Cargo.toml`:

Copy

    
    
    [dependencies]
    tycho-client = "0.35.3"

From there it is easy to add a Tycho stream to your rust program like so:

Copy

    
    
    use tycho_core::dto::Chain;
    use tycho_client::{stream::TychoStreamBuilder, feed::component_tracker::ComponentFilter};
    
    let receiver = TychoStreamBuilder::new("localhost:4242", Chain::Ethereum)
        .auth_key(Some("my_api_key".into()))
        .exchange("uniswap_v2", ComponentFilter::with_tvl_range(10.0, 15.0))
        .exchange(
            "uniswap_v3",
            ComponentFilter::Ids(vec![
                "0xCBCdF9626bC03E24f779434178A73a0B4bad62eD".to_string(),
                "0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640".to_string(),
            ]),
        )
        .build()
        .await
        .expect("Failed to build tycho stream");

For more information see the tycho-client
[documentation](https://github.com/propeller-heads/tycho-
indexer/tree/main/tycho-client).

A python package is available to ease integration into python-based projects.
To install locally:

  1. Build the package:

Copy

    
        pip install maturin
    python -m maturin build --release

  2. Install the package:

Copy

    
        pip install <path/to/your_package.whl>

Once installed, start streaming Tycho messages seamlessly. See here an example
quick setup:

Copy

    
    
    import asyncio
    from tycho_indexer_client import Chain, TychoStream
    from decimal import Decimal
    
    async def main():
        stream = TychoStream(
            tycho_url="localhost:8888",
            auth_token="secret_token",
            exchanges=["uniswap_v2"],
            min_tvl=Decimal(100),
            blockchain=Chain.ethereum,
        )
    
        await stream.start()
    
        async for message in stream:
            print(message)
    
    asyncio.run(main())

For more details on the python package see the tycho-client-py
[documentation](https://github.com/propeller-heads/tycho-
indexer/blob/main/tycho-client-py/README.md).

* * *

###

Message Types

Tycho emits data in an easy-to-read JSON format. Get granular updates on each
block:

  * **Snapshots** for complete component (or pool) states,

  * **Deltas** for specific updates, and

  * **Removal notices** for components that no longer match your filtration criteria.

Each message includes block details to help you stay on track with the latest
block data.

For specifics on the message structures and their intended uses, see our
tycho-client [documentation](https://github.com/propeller-heads/tycho-
indexer/blob/main/tycho-client/README.md).

* * *

###

Harness the Power of Tycho's RPC

The client packages above not only stream live data to you, but also lets you
access to Tycho’s RPC to query static token and protocol data.

####

Key Capabilities:

  * **Get Snapshots:** Fetch historical snapshots.

  * **Token information** : Query tokens that Tycho supports, and filter by e.g. days since the token was last traded or token type. 

Example fetching tokens from Tycho:

RustPython

Copy

    
    
    use tycho_client::rpc::HttpRPCClient;
    use tycho_core::dto::Chain;
    
    let client = HttpRPCClient::new("insert_tycho_url", Some("my_auth_token"));
    
    let tokens = client
        .get_all_tokens(
            Chain::Ethereum,
            Some(51_i32), // min token quality to filter for certain token types
            Some(30_u64), // number of days since last traded
            1000,         // pagination chunk size
        )
        .await
        .unwrap();
        
    /// Token quality is between 0-100, where:
    ///  - 100: Normal token
    ///  - 75: Rebase token
    ///  - 50: Fee token
    ///  - 10: Token analysis failed at creation
    ///  - 5: Token analysis failed on cronjob (after creation).
    ///  - 0: Failed to extract decimals onchain

Copy

    
    
    from tycho_indexer_client import (
        TychoRPCClient,
        TokensParams,
        Chain,
        PaginationParams
    )
    
    client = TychoRPCClient("http://0.0.0.0:4242", chain=Chain.ethereum)
    
    all_tokens = []
    page = 0
    
    while True:
        tokens = client.get_tokens(
            TokensParams(
                min_quality=51,
                traded_n_days_ago=30,
                pagination=PaginationParams(page=page, page_size=1000),
            )
        )
        
        if not tokens:
            break
        
        all_tokens.extend(tokens)
        page += 1

* * *

###

Hosted Tycho: Try Our Beta Service

You don't need to host Tycho yourself.

Get beta access to our **hosted Tycho service.** Message `@tanay_j` on
Telegram.

* * *

###

Learn More and Get Started

Ready to dive deeper? For a detailed guide on using Tycho Indexer, including
setup and customization options, visit the full documentation in our [GitHub
repository](https://github.com/propeller-heads/tycho-indexer).

[PreviousIndexer](/tycho/for-solvers/indexer)[NextSimulation](/tycho/for-
solvers/simulation)

Last updated 1 month ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/execution

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Supporting New Protocols
  * Main Encoder Interface
  * Main Swap Interface
  * Deployment and Whitelisting

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)

# Execution

##

Supporting New Protocols

To integrate a new protocol into Tycho, you need to implement two key
components:

  1. **SwapEncoder** (Rust struct) – Handles swap encoding.

  2. **Executor** (Solidity contract) – Executes the swap on-chain.

###

Main Encoder Interface

Each new protocol requires a dedicated `SwapEncoder` that implements the
`SwapEncoder` trait. This trait defines how swaps for the protocol are encoded
into calldata.

Copy

    
    
    fn encode_swap(
        &self,
        swap: Swap,
        encoding_context: EncodingContext,
    ) -> Result<Vec<u8>, EncodingError>;

This function encodes a swap and its relevant context information into
calldata that is compatible with the `Executor` contract. The output of the
`SwapEncoder` is the input of the `Executor` (see next section). See current
implementations [here](https://github.com/propeller-heads/tycho-
execution/blob/main/src/encoding/evm/swap_encoder/swap_encoders.rs).

###

Main Swap Interface

Every integrated protocol requires its own swap executor contract. This
contract must conform to the `IExecutor` interface, allowing it to interact
with the protocol and perform swaps. See currently implemented executors
[here](https://github.com/propeller-heads/tycho-
execution/tree/main/foundry/src/executors).

It has the main method:

Copy

    
    
    function swap(uint256 givenAmount, bytes calldata data)
            external
            payable
            returns (uint256 calculatedAmount)
        {

This function:

  * Accepts the input amount (`givenAmount`).

  * Processes the swap using the provided calldata (`data`) which is the output of the `SwapEncoder`.

  * Returns the final output amount (`calculatedAmount`).

Ensure that the implementation supports transferring received tokens to a
designated receiver address, either within the swap function or through an
additional transfer step.

If the protocol requires token approvals (allowances) before swaps can occur,
manage these approvals within the implementation to ensure smooth execution of
the swap.

Make sure to have an integration test that uses the calldata from the
`SwapEncoder` as input.

####

Protocols Supporting Consecutive Swap Optimizations

As described in the [Swap Group](/tycho/for-solvers/execution/encoding#swap-
group) section in our solver encoding docs, our swap strategies support
protocols which save token transfers between consecutive swaps using systems
such as flash accounting. In such cases, as shown in the diagram below using
Uniswap V4 as an example, the `SwapEncoder` is still only in charge of
encoding a **single swap**. These swaps will then be concatenated at the
`SwapStrategy` level as a single executor call. Depending on the index of the
swap in the swap group, the executor may be responsible for adding additional
information which is not necessary in other swaps of the sequence (see the
first swap in the diagram below).

###

Deployment and Whitelisting

Once your implementation is approved:

  1. **Deploy the executor contract** on the appropriate network.

  2. **Contact us** to whitelist the new executor address on our main router contract.

  3. **Update the configuration** by adding the new executor address to `executor_addresses.json `and register the `SwapEncoder` within the `SwapEncoderBuilder` .

By following these steps, your protocol will be fully integrated with Tycho,
enabling it to execute swaps seamlessly.

[PreviousEthereum: Solidity](/tycho/for-dexs/protocol-
integration/simulation/ethereum-solidity)[NextContributing
guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

Last updated 3 hours ago

![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F1487321251-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Fspaces%252FjrIe0oInIEt65tHqWn2w%252Fuploads%252FPbFXwH63mP3mG8BruERu%252FScreenshot%25202025-02-21%2520at%252021.03.34.png%3Falt%3Dmedia%26token%3D45d06266-76b1-44cd-
bca7-f6884b13b8b6&width=768&dpr=4&quality=100&sign=fe241f5a&sv=2)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/contributing-guidelines

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Local Development
  * Changing Rust Code
  * Creating a Pull Request

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)

# Contributing guidelines

##

Local Development

###

Changing Rust Code

Please make sure that the following commands pass if you have changed the
code:

Copy

    
    
    cargo check --all
    cargo test --all --all-features
    cargo +nightly fmt -- --check
    cargo +nightly clippy --workspace --all-features --all-targets -- -D warnings

We are using the stable toolchain for building and testing, but the nightly
toolchain for formatting and linting, as it allows us to use the latest
features of `rustfmt` and `clippy`.

If you are working in VSCode, we recommend you install the [rust-
analyzer](https://rust-analyzer.github.io/) extension, and use the following
VSCode user settings:

Copy

    
    
    "editor.formatOnSave": true,
    "rust-analyzer.rustfmt.extraArgs": ["+nightly"],
    "rust-analyzer.check.overrideCommand": [
    "cargo",
    "+nightly",
    "clippy",
    "--workspace",
    "--all-features",
    "--all-targets",
    "--message-format=json"
    ],
    "[rust]": {
    "editor.defaultFormatter": "rust-lang.rust-analyzer"
    }

##

Creating a Pull Request

We use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)
as our convention for formatting commit messages and PR titles.

[PreviousExecution](/tycho/for-dexs/protocol-integration/execution)

Last updated 2 months ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Swap/Exchange Protocol Guide
  * Implementing the Protocol
  * The Manifest File
  * Key Functions

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Simulation](/tycho/for-dexs/protocol-integration/simulation)

# Ethereum: Solidity

##

Swap/Exchange Protocol Guide

###

Implementing the Protocol

To integrate an EVM exchange protocol:

  1. Implement the [`ISwapAdapter.sol`](https://github.com/propeller-heads/propeller-protocol-lib/blob/main/evm/interfaces/ISwapAdapter.sol) interface.

  2. Create a manifest file summarizing the protocol's metadata.

###

The Manifest File

The manifest file contains author information and additional static details
about the protocol and its testing. Here's a list of all valid keys:

Copy

    
    
    yamlCopy# Author information helps us reach out in case of issues
    author:
      name: Propellerheads.xyz
      email: alan@propellerheads.xyz
    
    # Protocol Constants
    constants:
      # Minimum gas usage for a swap, excluding token transfers
      protocol_gas: 30000
      # Minimum expected capabilities (individual pools may extend these)
      # To learn about Capabilities, see ISwapAdapter.sol)
      capabilities:
        - SellSide
        - BuySide
        - PriceFunction
    
    # Adapter contract (byte)code files
    contract: 
      # Contract runtime (deployed) bytecode (required if no source is provided)
      runtime: UniswapV2SwapAdapter.bin
      # Source code (our CI can generate bytecode if you submit this)
      source: UniswapV2SwapAdapter.sol
    
    # Deployment instances for chain-specific bytecode
    # Used by the runtime bytecode build script
    instances:
      - chain:
          name: mainnet
          id: 1
        # Constructor arguments for building the contract
        arguments:
          - "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
    
    # Automatic test cases (useful if getPoolIds and getTokens aren't implemented)
    tests:
      instances:
        - pool_id: "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc"
          sell_token: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
          buy_token: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
          block: 17000000
          chain:
            name: mainnet
            id: 1

###

Key Functions

####

Price (optional)

Calculates pool prices for specified amounts.

Copy

    
    
    function price(
        bytes32 poolId,
        IERC20 sellToken,
        IERC20 buyToken,
        uint256[] memory sellAmounts
    ) external view returns (Fraction[] memory prices);

  * Return prices in buyToken/sellToken units.

  * Include all protocol fees (use minimum fee for dynamic fees).

  * Implement this method as `view` for efficiency and parallel execution.

  * If you don't implement this function, flag it accordingly in capabilities and make it revert using the `NotImplemented` error.

  * While optional, we highly recommend implementing this function. If unavailable, we'll numerically estimate the price function from the swap function.

####

Swap

Simulates token swapping on a given pool.

Copy

    
    
    function swap(
        bytes32 poolId,
        IERC20 sellToken,
        IERC20 buyToken,
        OrderSide side,
        uint256 specifiedAmount
    ) external returns (Trade memory trade);

  * Execute the swap and change the VM state accordingly.

  * Include a gas usage estimate for each amount (use `gasleft()` function).

  * Return a `Trade` struct with a `price` attribute containing `price(specifiedAmount)`.

  * If the price function isn't supported, return `Fraction(0, 1)` for the price (we'll estimate it numerically).

####

GetLimits

Retrieves token trading limits.

Copy

    
    
    function getLimits(bytes32 poolId, OrderSide side)
        external
        returns (uint256[] memory);

  * Return the maximum tradeable amount for each token.

  * The limit is reached when the change in received amounts is zero or close to zero.

  * Overestimate the limit if in doubt.

  * Ensure the swap function doesn't error with `LimitExceeded` for amounts below the limit.

####

getCapabilities

Retrieves pool capabilities.

Copy

    
    
    function getCapabilities(bytes32 poolId, IERC20 sellToken, IERC20 buyToken)
        external
        returns (Capability[] memory);

####

getTokens (optional)

Retrieves tokens for a given pool.

Copy

    
    
    function getTokens(bytes32 poolId)
        external
        returns (IERC20[] memory tokens);

  * We mainly use this for testing, as it's redundant with the required substreams implementation.

####

getPoolIds (optional)

Retrieves a range of pool IDs.

Copy

    
    
    function getPoolIds(uint256 offset, uint256 limit)
        external
        returns (bytes32[] memory ids);

  * We mainly use this for testing. It's okay not to return all available pools here.

  * This function helps us test against the substreams implementation.

  * If you implement it, it saves us time writing custom tests.

[PreviousSimulation](/tycho/for-dexs/protocol-
integration/simulation)[NextExecution](/tycho/for-dexs/protocol-
integration/execution)

Last updated 3 months ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/2.-implementation

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * 1\. Understanding the Protocol
  * 2\. Choosing a template
  * 3\. Implementation

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)

# 2\. Implementation

###

1\. Understanding the Protocol

Before integrating, ensure you have a thorough understanding of the protocol’s
structure and behavior. Key areas to focus on include:

  1. **Contracts and Their Roles** : Identify the contracts involved in the protocol and the specific roles they play. Understand how they impact the behavior of the component you're integrating.

  2. **Conditions for State Changes** : Determine which conditions, such as oracle updates or particular method calls, trigger state changes (e.g. price updates) in the protocol.

  3. **Component Addition and Removal** : Check how components are added or removed within the protocol. Many protocols either use a factory contract to deploy new components or provision new components directly through specific method calls.

Once you have a clear understanding of the protocol's mechanics, you can
proceed with the implementation.

###

2\. Choosing a template

We provide two templates that outline all necessary implementation steps to
get you started. If your protocol deploys one contract per pool deployment
(e.g. UniswapV2 or UniswapV3) please choose the [`ethereum-template-
factory`](https://github.com/propeller-heads/tycho-protocol-
sdk/tree/main/substreams/ethereum-template-ethereum). If your protocol does
use a fixed set of contracts (e.g. UniswapV4) please use the [`ethereum-
template-singleton`](https://github.com/propeller-heads/tycho-protocol-
sdk/tree/main/substreams/ethereum-template-singleton) . If you are unsure
which one to choose please ask in
[tycho.build](https://t.me/+B4CNQwv7dgIyYTJl) group for support.

  * Create a new directory for your integration by copying the template, rename all the references to `ethereum-template-[factory|singleton]` to `[CHAIN]-[PROTOCOL_SYSTEM]`(please use lowercase latters):

Copy

    
        cp -r ./substreams/ethereum-template-factory ./substreams/[CHAIN]-[PROTOCOL_SYSTEM]

  * Now, generate the required protobuf code by running:

Copy

    
        substreams protogen substreams.yaml --exclude-paths="sf/substreams,google"

  * Next, register the new package within the workspace by adding it to the members list in `substreams/Cargo.toml`.

  * Add any abis specific to your protocol under `[CHAIN]-[PROTOCOL-SYSTEM]/abi/`

  * Your project should now compile and be runnable with substreams:

Copy

    
        cd [CHAIN]-[PROTOCOL-SYSTEM]
    cargo build --release --target wasm32-unknown-unknown
    substreams gui substreams.yaml map_protocol_changes

###

3\. Implementation

If you're using a template, you'll need to implement **three steps** to ensure
proper functionality:

The template includes **TODO** comments at lines that likely require your
attention. Additionally, each function is documented with explanations and
hints on when modifications may be necessary.

  1. **Identify newly created**`**ProtocolComponents**`**and Metadata**

You will have to extract relevant protocol components and attach all necessary
metadata that may serve to encode swaps (or other actions) or to filter
components. Examples of such attributes could be: pool identifier, pool keys,
swap fees, pool_type and any other relevant static properties. Note that some[
attribute names are reserved](/tycho/for-dexs/protocol-
integration/indexing/reserved-attributes)**** they may not always be needed
but must be respected for compatibility.

  2. **Emit BalanceDelta for**`**ProtocolComponents**` Tycho tracks **TVL per component** , so you must emit **relative BalanceChanges** whenever an event impacts the balances associated with a component. _If your protocol emits events with absolute balances, you might be able to skip this step._

  3. **Track relevant storage slot changes** For factory like protocols the template covers this automatically as long as the `ProtocolComponent.id` is equivalent with the contract address. For singleton contracts you'll have to list the contracts you'd like to be tracked.

Depending on the specifics of your protocol additional changes may be
necessary. E.g. some protocols might require storage slot tracking of a
specific helper contract.

[Previous1\. Setup](/tycho/for-dexs/protocol-
integration/indexing/1.-setup)[Next3\. Testing](/tycho/for-dexs/protocol-
integration/indexing/3.-testing)

Last updated 20 days ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/3.-testing

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Overview
  * Prerequisites
  * Archive node
  * Tycho Indexer
  * Test Configuration
  * Setup testing environment
  * Running Tests
  * Step 1: Export Environment Variables
  * Step 2: Set up tests
  * Step 3: Run tests

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)

# 3\. Testing

We provide a comprehensive testing suite for Substreams modules. The testing
suite facilitates end-to-end testing, ensuring your Substreams modules
function as expected. For unit tests, please use standard [Rust unit testing
practices](https://doc.rust-lang.org/book/ch11-01-writing-tests.html).

##

Overview

The testing suite will run [Tycho Indexer](https://github.com/propeller-
heads/tycho-indexer) with your provided Substream implementation for a
specific block range and verify that the state matches the expected state
specified on the testing YAML file.

It will also try to simulate transactions using [Tycho
Simulation](https://github.com/propeller-heads/tycho-simulation) engine,
verifying the functionality of the provided `SwapAdapter` contract.

##

Prerequisites

Before continuing, ensure the following tools and libraries are installed on
your system:

  * [Docker](https://www.docker.com/): Containerization platform for running applications in isolated environments.

  * [Conda](https://conda.io/projects/conda/en/latest/user-guide/install/index.html): Package and environment manager for Python and other languages.

  * [AWS CLI](https://aws.amazon.com/cli/): Tool to manage AWS services from the command line.

  * [Git](https://git-scm.com/): Version control tool

  * [Rust](https://www.rust-lang.org/): Programming language and toolchain

  * [GCC](https://gcc.gnu.org/): GNU Compiler Collection

  * [libpq](https://www.postgresql.org/docs/9.5/libpq.html): PostgreSQL client library

  * [**O** penSSL (libssl)](https://github.com/openssl/openssl): OpenSSL development library

  * [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/): Helper tool for managing compiler flags

  * [Conda](https://docs.conda.io/en/latest/): Python package manager

  * [pip](https://pip.pypa.io/): Python package installer

###

Archive node

The testing system relies on an EVM **Archive** node to fetch the state from a
previous block. Indexing only with Substreams, as done in Tycho's production
mode, requires syncing blocks since the protocol's deployment date, which can
take a long time. The node skips this requirement by fetching all the required
account's storage slots on the block specified in the testing `yaml`file.

The node also needs to support the
[debug_storageRangeAt](https://www.quicknode.com/docs/ethereum/debug_storageRangeAt)
method, as it's a requirement for our Token Quality Analysis.

###

Tycho Indexer

####

Verify the current version

The testing module runs a minified version of [Tycho
Indexer](https://github.com/propeller-heads/tycho-indexer). You can ensure
that the latest version is correctly setup in your PATH by running the
following command on your terminal:

Copy

    
    
    > tycho-indexer --version
    tycho-indexer 0.54.0 # should match the latest version published on GitHub

####

Installing or updating the version (Optional)

If the command above does not provide the expected output, you need to
(re)install Tycho.

Build locally (recommended)Pre-built release (Linux AMD only)

If you're running on a **MacOS** (either Apple Silicon or Intel) - or any
architecture that is not supported by pre-built releases, you need to compile
the Tycho Indexer:

**Step 1: Clone Tycho-Indexer repo**

Copy

    
    
    git clone git@github.com:propeller-heads/tycho-indexer.git
    cd tycho-indexer

**Step 2: Build the binary in release mode**

Copy

    
    
    cargo build --release --bin tycho-indexer

**Step 3: Link the binary to a directory in your system 's PATH:**

Copy

    
    
    sudo ln -s $(pwd)/target/release/tycho-indexer /usr/local/bin/tycho-indexer

> **NOTE** : This command requires `/usr/local/bin` to be included in the
> system's `PATH.` While this is typically the case, there may be exceptions.
>
> If `/usr/local/bin` is not in your `PATH`, you can either:
>
>   1. Add it to your `PATH` by exporting it:
>
> Copy
>  
>     >     export PATH="/usr/local/bin:$PATH"
>
>   2. Or create a symlink in any of the following directories (if they are in
> your `PATH`):
>
>

>
> Copy
>  
>  
>     /bin
>     /sbin
>     /usr/bin
>     /usr/sbin
>     /usr/local/bin
>     /usr/local/sbin

**Step 4: Verify Installation**

Copy

    
    
    > tycho-indexer --version
    tycho-indexer 0.54.0 # should match the latest version published on GitHub

We provide a binary compiled for Linux x86/x64 architecture on our GitHub
[releases](https://github.com/propeller-heads/tycho-indexer/releases) page.

This method will only work if you are running on a Linux with an x86/x64
architecture

**Step 1: Download the pre-built binary**

Navigate to the [Tycho Indexer Releases](https://github.com/propeller-
heads/tycho-indexer/releases) page, locate the latest version (e.g.: `0.54.0)`
and download the `tycho-indexer-x86_64-unknown-linux-gnu-{version}.tar.gz`
file.

**Step 2: Extract the binary from the tar.gz**

Open a terminal and navigate to the directory where the file was downloaded.
Run the following command to extract the contents:

Copy

    
    
    tar -xvzf tycho-indexer-x86_64-unknown-linux-gnu-{version}.tar.gz

**Step 3: Link the binary to a directory in your system 's PATH:**

Copy

    
    
    // Ensure the binary is executable:
    sudo chmod +x tycho-indexer
    // Create symlink
    sudo ln -s $(pwd)/tycho-indexer /usr/local/bin/tycho-indexer

> NOTE: This command requires `/usr/local/bin` to be included in the system's
> `PATH.` While this is typically the case, there may be exceptions.
>
> If `/usr/local/bin` is not in your `PATH`, you can either:
>
>   1. Add it to your `PATH` by exporting it:
>
> Copy
>  
>     >     export PATH="/usr/local/bin:$PATH"
>
>   2. Or create a symlink in any of the following directories (if they are in
> your `PATH`):
>
>

>
> Copy
>  
>  
>     /bin
>     /sbin
>     /usr/bin
>     /usr/sbin
>     /usr/local/bin
>     /usr/local/sbin

**Step 4: Verify Installation**

Copy

    
    
    > tycho-indexer --version
    tycho-indexer 0.54.0 # should match the latest version published on GitHub

##

Test Configuration

Tests are defined in a `yaml` file. A documented template can be found at
[`substreams/ethereum-
template/integration_test.tycho.yaml`](https://github.com/propeller-
heads/tycho-protocol-sdk/blob/main/substreams/ethereum-
template/integration_test.tycho.yaml). The configuration file should include:

  * The target Substreams config file.

  * The corresponding SwapAdapter and args to build it.

  * The expected protocol types.

  * The tests to be run.

Each test will index all blocks between `start-block` and `stop-block`, verify
that the indexed state matches the expected state, and optionally simulate
transactions using the provided `SwapAdapter`.

You will also need the VM Runtime file for the adapter contract. Our testing
script should be able to build it using your test config. The script to
generate this file manually is available under
[`evm/scripts/buildRuntime.sh`](https://github.com/propeller-heads/tycho-
protocol-sdk/blob/main/evm/scripts/buildRuntime.sh).

##

Setup testing environment

To set up your test environment, run the [setup environment
script](https://github.com/propeller-heads/tycho-protocol-
sdk/blob/main/testing/setup_env.sh). It will create a Conda virtual env and
install all the required dependencies.

Copy

    
    
    ./setup_env.sh

This script must be run from within the `tycho-protocol-sdk/testing`
directory.

Lastly, you need to activate the conda env:

Copy

    
    
    conda activate tycho-protocol-sdk-testing

##

Running Tests

###

Step 1: Export Environment Variables

Export the required environment variables for the execution. You can find the
available environment variables in the `.env.default` file. Please create a
`.env` file in the `testing` directory and set the required environment
variables.

####

**Environment Variables**

**RPC_URL**

  * **Description** : The URL for the Ethereum RPC endpoint. This is used to fetch the storage data. 

The node needs to be an archive node and support
[debug_storageRangeAt](https://www.quicknode.com/docs/ethereum/debug_storageRangeAt)
method.

  * **Example** : `export RPC_URL="https://ethereum-mainnet.core.chainstack.com/123123123123"`

**SUBSTREAMS_API_TOKEN**

  * **Description** : The JWT token for accessing Substreams services. This token is required for authentication. Please refer to [Substreams Authentication](https://docs.substreams.dev/reference-material/substreams-cli/authentication) guide to setup and validate your token.

  * **Example** : `export SUBSTREAMS_API_TOKEN=eyJhbGci...`

###

Step 2: Set up tests

If you do not have one already, you must build the wasm file of the package
you wish to test. This can be done by navigating to the package directory and
running:

Copy

    
    
    cargo build --target wasm32-unknown-unknown --release

Then, run a local Postgres test database using docker-compose. This needs to
be done from within the testing directory.

Copy

    
    
    docker compose up -d db

###

Step 3: Run tests

Run tests for your package. This must be done from the main project directory.

Copy

    
    
    python ./testing/src/runner/cli.py --package "your-package-name"

**Example**

If you want to run tests for `ethereum-balancer-v2`, use:

Copy

    
    
    // Activate conda environment
    conda activate tycho-protocol-sdk-testing
    
    // Setup Environment Variables
    export RPC_URL="https://ethereum-mainnet.core.chainstack.com/123123123123"
    export SUBSTREAMS_API_TOKEN=eyJhbGci...
    
    // Build BalancerV2's Substreams wasm
    cd substreams
    cargo build --release --package ethereum-balancer-v2 --target wasm32-unknown-unknown
    cd ..
    
    // Run Postgres DB using Docker compose
    cd testing
    docker compose up -d db
    cd ..
    
    // Run the testing file
    python ./testing/src/runner/cli.py --package "ethereum-balancer-v2"

**Testing CLI args**

A list and description of all available CLI args can be found using:

Copy

    
    
    python ./testing/src/runner/cli.py --help

For enhanced debugging, running the testing module with the --tycho-logs flag
is recommended. It will enable Tycho-indexer logs

[Previous2\. Implementation](/tycho/for-dexs/protocol-
integration/indexing/2.-implementation)[NextCommon Problems &
Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-
patterns)

Last updated 28 days ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/reserved-attributes

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Static Attributes
  * State Attributes

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)

# Reserved Attributes

Certain attribute names are reserved exclusively for specific purposes. Please
use them only for their intended applications.

##

Static Attributes

The following attributes names are reserved and must be given using
`ProtocolComponent.static_att`. These attributes MUST be immutable. If it can
ever change, it should be given as a state attribute (see below) for this
component id.

  * **manual_updates**

####

Description

The `manual_updates` static attribute determines whether the component update
should be manually triggered using the `update_marker` state attribute. By
default, updates occur automatically whenever there is a change in any of the
required contracts. However, in scenarios where a contract undergoes frequent
changes, automatic updates may not be desirable. For instance, a change in
Balancer Vault storage should only trigger updates for the specific pools
affected by the change, rather than for all pools indiscriminately. The
`manual_updates` field helps to control and prevent unnecessary updates in
such cases.

If it's enable, updates on this component are only triggered by emitting an
`update_marker` state attribute (described below).

####

Type

This attribute must be set to [1u8] to enable manual updates.

####

Example Usage

Copy

    
    
    Attribute {
        name: "manual_updates".to_string(),
        value: [1u8],
        change: ChangeType::Creation.into(),
    }

  * **pool_id**

####

Description

The `pool_id` static attribute is used to specify the identifier of the pool
when it differs from the `ProtocolComponent.id`. For example, Balancer pools
have a component ID that corresponds to their contract address, and a separate
pool ID used for registration on the Balancer Vault contract.

**Notice** : In most of the cases, using `ProtocolComponent.id` directly is
preferred over `pool_id`.

####

Type

This attribute value must be provided as a UTF-8 encoded string in bytes.

####

Example Usage

Copy

    
    
    Attribute {
        name: "pool_id".to_string(),
        value: format!("0x{}", hex::encode(pool_registered.pool_id)).as_bytes(),
        change: ChangeType::Creation.into(),
    }

##

State Attributes

The following attributes names are reserved and must be given using
`EntityChanges`. Unlike Static Attributes, state attributes are used for
dynamic attributes and are allowed to change at anytime.

  * **stateless_contract_addr**

####

Description

The `stateless_contract_addr_{index}` field is used to specify the address of
a stateless contract required by the component. This field is essential for
components that interact with stateless contracts, particularly in scenarios
involving `DELEGATECALL`. If the bytecode of this stateless contract can be
retreived in Substreams, it must be passed using the `stateless_contract_code`
attribute (see below).

An index is used if multiple stateless contracts are needed. This index should
start at 0 and increment by 1 for each additional `stateless_contract_addr`.

The value for `stateless_contract_addr_{index}` can be provided in two ways:

  1. **Direct Contract Address** : A static contract address can be specified directly.

  2. **Dynamic Address Resolution** : Alternatively, you can define a function or method that dynamically resolves and retrieves the stateless contract address at runtime. This can be particularly useful in complex contract architectures, such as those using a dynamic proxy pattern. It is important to note that the called contract must be indexed by the Substreams module.

####

Type

This attribute value must be provided as a UTF-8 encoded string in bytes.

####

Example Usage

**1\. Direct Contract Address**

To specify a direct contract address:

Copy

    
    
    Attribute {
        name: "stateless_contract_addr_0".into(),
        value: format!("0x{}", hex::encode(address)).into_bytes(),
        change: ChangeType::Creation.into(),
    }
    Attribute {
        name: "stateless_contract_addr_1".into(),
        value: format!("0x{}", hex::encode(other_address)).into_bytes(),
        change: ChangeType::Creation.into(),
    }

**2\. Dynamic Address Resolution**

To specify a function that dynamically resolves the address:

Copy

    
    
    Attribute {
        name: "stateless_contract_addr_0".into(),
        // Call views_implementation() on TRICRYPTO_FACTORY
        value: format!("call:0x{}:views_implementation()", hex::encode(TRICRYPTO_FACTORY)).into_bytes(),
        change: ChangeType::Creation.into(),
    }

  * **stateless_contract_code**

####

Description

The `stateless_contract_code_{index}` field is used to specify the code for a
given `stateless_contract_addr`.

An index is used if multiple stateless contracts are needed. This index must
match with the related `stateless_contract_addr`.

####

Type

This attribute value must be provided as bytes.

####

Example Usage

Copy

    
    
    Attribute {
        name: "stateless_contract_code_0".to_string(),
        value: code.to_vec(),
        change: ChangeType::Creation.into(),
    }

  * **balance_owner**

####

Description

The `balance_owner` field is used to specify the address of the account that
owns the protocol component tokens, in cases where the tokens are not owned by
the protocol component itself or the component specifies multiple contract
addresses. This is particularly useful for protocols that use a vault, for
example Balancer.

####

Type

This attribute value must be provided as bytes.

####

Example Usage

Copy

    
    
    Attribute {
        name: "balance_owner".to_string(),
        value: VAULT_ADDRESS.to_vec(),
        change: ChangeType::Creation.into(),
    }

  * **update_marker**

####

Description

The `update_marker` field is used to indicate that a pool has changed, thereby
triggering an update on the protocol component when `manual_update` is
enabled.

####

Type

This attribute value must be provided as bytes.

####

Example Usage

Copy

    
    
    Attribute {
        name: "update_marker".to_string(),
        value: vec![1u8],
        change: ChangeType::Update.into(),
    };

[PreviousCustom protobuf models](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/custom-protobuf-
models)[NextSimulation](/tycho/for-dexs/protocol-integration/simulation)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/1.-setup

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Install Rust
  * Install Substreams
  * Install Buf
  * Fork the SDK repo

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)

# 1\. Setup

###

Install Rust

  * Install [Rust](https://www.rust-lang.org/tools/install), you can do so with the following command:

Copy

    
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

###

Install Substreams

  * Install [Substreams CLI](https://substreams.streamingfast.io/getting-started/installing-the-cli), you can either use brew:

Copy

    
        brew install streamingfast/tap/substreams

use precompiled binaries

Copy

    
        # Use correct binary for your platform
    LINK=$(curl -s https://api.github.com/repos/streamingfast/substreams/releases/latest | awk '/download.url.*linux/ {print $2}' | sed 's/"//g')
    curl -L  $LINK  | tar zxf -

or compile from source:

Copy

    
        git clone https://github.com/streamingfast/substreams
    cd substreams
    go install -v ./cmd/substreams

###

Install Buf

  * Install [buf](https://buf.build/), you can either use brew:

Copy

    
        $ brew install bufbuild/buf/buf

Or follow alternative instruction from the [official
website](https://buf.build/docs/installation/#__tabbed_1_1)

###

Fork the SDK repo

  1. Start by making a fork of the [Tycho Protocol SDK](https://github.com/propeller-heads/tycho-protocol-sdk) repository:

  2. Clone the fork you just created

  3. Make sure everything compiles fine

Copy

    
        cd substreams
    cargo check --all

[PreviousOverview](/tycho/for-dexs/protocol-
integration/indexing/overview)[Next2\. Implementation](/tycho/for-
dexs/protocol-integration/indexing/2.-implementation)

Last updated 22 days ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/overview

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * Deliverable
  * Understanding the Data Model
  * Changes of interest

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)

# Overview

This page provides in-detail context and overview of the data model necessary
to ingest protocol state into Tycho Indexer.

If you want to get started as quickly as possible you can skip ahead to
[Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup) to start
integrating right away.

###

Deliverable

Our indexing integrations require a Substreams SPKG to transform raw
blockchain data into high-level data streams.

Substreams is a new indexing technology that uses Rust modules to process raw
blockchain data into more structured, protocol-specific data streams. These
modules, along with protobuf definitions and a manifest, are packaged into an
SPKG file (more info [here](https://substreams.streamingfast.io/quick-
access/glossary#spkg-.spkg)) which can then be run on the Substreams server.

For further information, refer to the
[Substreams](https://thegraph.com/docs/en/substreams/) [quick
explanation](https://thegraph.com/docs/en/substreams/) or explore the full
[documentation](https://docs.substreams.dev/), which outlines the required
functions and manifest file structure.

####

**Integration Modes: VM and Native**

####

VM

VM integrations primarily track contract storage associated with the
protocol’s behavior. A key limitation in Substreams to keep in mind is that
you must witness a contract’s creation to access its full storage. Most
integrations will likely use the VM method due to its relative simplicity, so
this guide focuses on VM-based integrations.

####

Native

Native integrations follow a similar approach with one main difference:
instead of emitting changes in contract storage slots, they should emit values
for all created and updated attributes relevant to the protocol’s behavior.

###

Understanding the Data Model

The Tycho Indexer ingests all data versioned by block and transaction. This
approach helps maintain a low-latency feed and correctly handles chains that
may undergo reorgs.

Each state change communicated must include the transaction that caused the
change. Additionally, each transaction carrying state changes must be paired
with its corresponding block.

In summary, when processing a block, we need to emit the block itself, all
transactions that introduce protocol state changes, and, finally, the state
changes associated with their corresponding transactions.

**Details of the data model that encodes these changes, transactions, and
blocks in messages are available** [**here**](https://github.com/propeller-
heads/propeller-protocol-lib/tree/main/proto/tycho/evm/v1)**.**

####

Models

The models below facilitate communication between Substreams and the Tycho
Indexer, as well as within Substreams modules. Tycho Indexer expects to
receive a `BlockChanges` output from your Substreams package.

Changes must be aggregated at the transaction level; it is considered an error
to emit `BlockChanges` with duplicate transactions in the `changes`
attributes.

####

Integer Byte encoding

To ensure compatibility across blockchains, many of the data types listed
above are encoded as variable-length bytes. This flexible approach requires an
informal interface so that consuming applications can interpret these bytes
consistently.

**Integers:** When encoding integers, particularly those representing
balances, always use unsigned big-endian format. Balances are referenced at
multiple points within the system and need to be consistently decoded along
their entire journey.

**Strings** : Use UTF-8 encoding for any string data stored as bytes.

**Attributes:** Attribute encoding is variable and depends on the specific use
case. However, whenever possible, follow the encoding standards mentioned
above for integers and string

####

Special attribute names

Certain attribute names are reserved for specific functions in our simulation
process. Use these names only for their intended purposes. Refer to the list
of reserved attributes.

###

Changes of interest

Tycho Protocol Integrations should communicate the following changes:

  1. **New Protocol Components** : Notify any newly added protocol components, such as pools, pairs, or markets—essentially, anything that indicates a new operation can now be executed using the protocol.

  2. **ERC20 Balances** : Whenever the balances of any contracts involved with the protocol change, report these changes in terms of absolute balances.

  3. **Protocol State Changes** : For VM integrations, this typically involves reporting contract storage changes for all contracts whose state may be accessed during a swap operation (except token contracts).

For a hands-on integration guide, refer to the Getting Started page.

[PreviousIndexing](/tycho/for-dexs/protocol-integration/indexing)[Next1\.
Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)

Last updated 22 days ago




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)
  4. [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

# Normalizing relative ERC20 Balances

Tracking balances is complex if only relative values are available. If the
protocol provides absolute balances (e.g., through logs), you can skip this
section and simply emit the absolute balances.

To derive absolute balances from relative values, you’ll need to aggregate by
component and token, ensuring that balance changes are tracked at the
transaction level within each block. The recommended approach includes the
following steps:

####

1\. Index relative balance changes

To accurately process each block and report balance changes, implement a
handler that returns the `BlockBalanceDeltas` struct. Each `BalanceDelta` for
a component-token pair must be assigned a strictly increasing ordinal to
preserve transaction-level integrity. Incorrect ordinal sequencing can lead to
inaccurate balance aggregation.

Example interface for a handler that uses an integer, loaded from a store to
indicate if a specific address is a component:

Copy

    
    
    #[substreams::handlers::map]
    pub fn map_relative_balances(
        block: eth::v2::Block,
        components_store: StoreGetInt64,
    ) -> Result<BlockBalanceDeltas, anyhow::Error> {
        todo!()
    }

Use the `tycho_substream::balances::extract_balance_deltas_from_tx` function
from our Substreams SDK to extract `BalanceDelta` data from ERC20 Transfer
events for a given transaction, as in the [Curve
implementation](https://github.com/propeller-heads/propeller-protocol-
lib/blob/main/substreams/ethereum-curve/src/modules.rs#L153).

####

2\. Aggregate balances with an additive store

To efficiently convert `BlockBalanceDeltas` messages into absolute values
while preserving transaction granularity, use the `StoreAddBigInt` type with a
store module. The `tycho_substream::balances::store_balance_changes` helper
function simplifies this task.

Typical usage of this function:

Copy

    
    
    #[substreams::handlers::store]
    pub fn store_balances(deltas: BlockBalanceDeltas, store: StoreAddBigInt) {
        tycho_substreams::balances::store_balance_changes(deltas, store);
    }

####

3\. Combine absolute values with component and address

Finally, associate absolute balances with their corresponding transaction,
component, and token. Use the
`tycho_substream::balances::aggregate_balances_changes` helper function for
the final aggregation step. This function outputs `BalanceChange` structs for
each transaction, which can then be integrated into `map_protocol_changes` to
retrieve absolute balance changes per transaction.

Example usage:

Copy

    
    
    #[substreams::handlers::map]
    pub fn map_protocol_changes(
        block: eth::v2::Block,
        grouped_components: BlockTransactionProtocolComponents,
        deltas: BlockBalanceDeltas,
        components_store: StoreGetInt64,
        balance_store: StoreDeltas,
    ) -> Result<BlockChanges> {
        let mut transaction_contract_changes: HashMap<_, TransactionChanges> = HashMap::new();
    
        aggregate_balances_changes(balance_store, deltas)
            .into_iter()
            .for_each(|(_, (tx, balances))| {
                transaction_contract_changes
                    .entry(tx.index)
                    .or_insert_with(|| TransactionChanges::new(&tx))
                    .balance_changes
                    .extend(balances.into_values());
            });
    }

Each step ensures accurate tracking of balance changes, making it possible to
reflect absolute values for components and tokens reliably.

[PreviousTracking Contract Storage](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/tracking-contract-
storage)[NextCustom protobuf models](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/custom-protobuf-models)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)
  4. [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

# Tracking Components

A common pattern if protocols use factories to deploy components, is to detect
the creation of new these and store their contract addresses to track them
downstream. Later, you might need to emit balance and state changes based on
the current set of tracked components.

Emitting state or balance changes for components not previously registered is
considered an error.

Start by implementing a map module that identifies and emits any newly created
components. These are detected by inspecting the `sf.ethereum.type.v2.Block`
model. The output message should include all available information about the
component at the time of creation, along with the transaction that deployed
it.

A recommended approach is to create a `factory.rs` module to facilitate the
detection of newly deployed components. Use this module in a map handler to
detect and emit new protocol components. The recommended output model for this
initial handler is `BlockTransactionProtocolComponents`:

Copy

    
    
    // A message containing protocol components that were created by a single tx.
    message TransactionProtocolComponents {
      Transaction tx = 1;
      repeated ProtocolComponent components = 2;
    }
    
    // All protocol components that were created within a block with their corresponding tx.
    message BlockTransactionProtocolComponents {
      repeated TransactionProtocolComponents tx_components = 1;
    }

Note that a single transaction may create multiple components. In such cases,
`TransactionProtocolComponents.components` should list all newly created
`ProtocolComponents`.

After emitting, store the protocol components in a `Store` to determine later
whether a contract is relevant for tracking.

[PreviousCommon Problems & Patterns](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns)[NextTracking Contract
Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-
patterns/tracking-contract-storage)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)
  4. [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

# Custom protobuf models

In some cases, you may need to create custom intermediate protobuf messages,
especially when facilitating communication between Substreams handler modules
or storing additional data in stores.

Place these protobuf files within your Substreams package, such as
`./substreams/ethereum-template/proto/custom-messages.proto`. Be sure to link
them in the `substreams.yaml` file. For more details, refer to the [manifest
documentation](https://docs.substreams.dev/documentation/develop/manifest-
modules) or review the official Substreams
[UniswapV2](https://github.com/messari/substreams/blob/master/uniswap-v2/substreams.yaml#L20-L22)
example integration.

[PreviousNormalizing relative ERC20 Balances](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/normalizing-relative-
erc20-balances)[NextReserved Attributes](/tycho/for-dexs/protocol-
integration/indexing/reserved-attributes)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  1. [For DEXs](/tycho/for-dexs)
  2. [Protocol Integration](/tycho/for-dexs/protocol-integration)
  3. [Indexing](/tycho/for-dexs/protocol-integration/indexing)
  4. [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

# Tracking Contract Storage

In VM implementations, accurately identifying and extracting relevant contract
changes is essential. Each contract usually corresponds to a unique component,
allowing its hex-encoded address to serve as the component ID, provided there
is a one-to-one relationship between contracts and components. Note that this
relationship may not always hold, so ensure this assumption applies to your
specific protocol.

To streamline the extraction of relevant changes from the expanded block
model, use the `tycho_substreams::contract::extract_contract_changes` helper
function, which simplifies the process considerably.

The example below shows how to use a component store to define a predicate.
This predicate filters for contract addresses of interest:

Copy

    
    
    use tycho_substreams::contract::extract_contract_changes;
    
    let mut transaction_contract_changes: HashMap<_, TransactionChanges> = HashMap::new();
    
    extract_contract_changes(
        &block,
        |addr| {
            components_store
                .get_last(format!("pool:{0}", hex::encode(addr)))
                .is_some()
        },
        &mut transaction_contract_changes,
    );

[PreviousTracking Components](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/tracking-
components)[NextNormalizing relative ERC20 Balances](/tycho/for-dexs/protocol-
integration/indexing/common-problems-and-patterns/normalizing-relative-
erc20-balances)




Filename: /Users/markusschmitt/Documents/Github/ChadBD/data/websites/docs.propellerheads.xyz/tycho/docs.propellerheads.xyz/tycho/overview/how-to-contribute/bounties

[![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)![](https://docs.propellerheads.xyz/~gitbook/image?url=https%3A%2F%2F4275700994-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-
x-
prod.appspot.com%2Fo%2Forganizations%252F9wMvRDQIhk1xOsIZ0Zde%252Fsites%252Fsite_xbTFd%252Ficon%252FRlQTQJcR8y1QHLuDgXGo%252FGroup%2520179.png%3Falt%3Dmedia%26token%3Dd74bbff7-0353-445d-b7ee-5a53a876d933&width=32&dpr=4&quality=100&sign=f11e7376&sv=2)Tycho](https://docs.propellerheads.xyz/tycho/)

Search...

Ctrl + K

  * [Overview](/tycho)

    * [How to Contribute](/tycho/overview/how-to-contribute)

      * [Bounties](/tycho/overview/how-to-contribute/bounties)

  * For Solvers

    * [Quickstart](/tycho/for-solvers/quickstart)
    * [Indexer](/tycho/for-solvers/indexer)

      * [Clients](/tycho/for-solvers/indexer/clients)

    * [Simulation](/tycho/for-solvers/simulation)
    * [Execution](/tycho/for-solvers/execution)

      * [Encoding](/tycho/for-solvers/execution/encoding)
      * [Executing](/tycho/for-solvers/execution/executing)
      * [Contract Addresses](/tycho/for-solvers/execution/contract-addresses)

    * [Supported Protocols](/tycho/for-solvers/supported-protocols)
  * For DEXs

    * [Protocol Integration](/tycho/for-dexs/protocol-integration)

      * [Indexing](/tycho/for-dexs/protocol-integration/indexing)

        * [Overview](/tycho/for-dexs/protocol-integration/indexing/overview)
        * [1\. Setup](/tycho/for-dexs/protocol-integration/indexing/1.-setup)
        * [2\. Implementation](/tycho/for-dexs/protocol-integration/indexing/2.-implementation)
        * [3\. Testing](/tycho/for-dexs/protocol-integration/indexing/3.-testing)
        * [Common Problems & Patterns](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns)

          * [Tracking Components](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-components)
          * [Tracking Contract Storage](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/tracking-contract-storage)
          * [Normalizing relative ERC20 Balances](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/normalizing-relative-erc20-balances)
          * [Custom protobuf models](/tycho/for-dexs/protocol-integration/indexing/common-problems-and-patterns/custom-protobuf-models)

        * [Reserved Attributes](/tycho/for-dexs/protocol-integration/indexing/reserved-attributes)

      * [Simulation](/tycho/for-dexs/protocol-integration/simulation)

        * [Ethereum: Solidity](/tycho/for-dexs/protocol-integration/simulation/ethereum-solidity)

      * [Execution](/tycho/for-dexs/protocol-integration/execution)
      * [Contributing guidelines](/tycho/for-dexs/protocol-integration/contributing-guidelines)

[Powered by
GitBook](https://www.gitbook.com/?utm_source=content&utm_medium=trademark&utm_campaign=jrIe0oInIEt65tHqWn2w)

On this page

  * How bounties work
  * Steps
  * Open Bounties

  1. [Overview](/tycho)
  2. [How to Contribute](/tycho/overview/how-to-contribute)

# Bounties

In some cases, the community sponsors a bounty.

Current open bounties: [Bounty
Tracker](https://docs.google.com/spreadsheets/d/1mVA1sSF70lesJL2cKPeidmU1K2urb4GCPl0zumJaLaU/edit?usp=sharing)

Specifically for:

  * **DEX Integrations** : Some DEXs can't integrate themselves - and instead sponsor a bounty for the community.

  * **Orderflow integrations** : Tools that want to use Tycho in their router.

  * **Tycho X Projects** : Teams can also sponsor bounties for Tycho X projects.

###

How bounties work

  * **Cumulative Bounties** : Several parties can sponsor and cumulate a bounty for the same issue.

  * **Single winner** : Bounties are, unless specified otherwise, awarded in full to the first team that satisfies the requirements.

  * **Core Maintainer Support** : Tycho maintainers will support every team working on a bounty. Incl. guidance, PR reviews, and final assessment.

  * **Award of a Bounty** : Each bounty has a board of three assessors, usually the one who specified the bounty, the sponsor of the bounty, and one dev from the Tycho team.

###

Steps

  * **Discover a bounty** : Find current open bounties in the – [Bounty Tracker](https://docs.google.com/spreadsheets/d/1mVA1sSF70lesJL2cKPeidmU1K2urb4GCPl0zumJaLaU/edit?usp=sharing).

  * **Reach out** : Reach out to Tycho maintainers at [tycho.build](http://tycho.build/) or dm [Tanay](https://t.me/tanay_j) if you plan to work on a bounty.

  * **Submit** : Submit your work in a PR and notify maintainers.

  * **Review & Award**: After a successful review by the three assessors, maintainers will merge the PR and payout the bounty. (any merged PR automatically qualifies for the bounty.)

###

Open Bounties

Find the list of open bounties here: [Bounty
Tracker](https://docs.google.com/spreadsheets/d/1mVA1sSF70lesJL2cKPeidmU1K2urb4GCPl0zumJaLaU/edit?usp=sharing)

[PreviousHow to Contribute](/tycho/overview/how-to-
contribute)[NextQuickstart](/tycho/for-solvers/quickstart)

Last updated 28 days ago


